openapi: 3.0.0
info:
  title: Authentication API
  version: "1.0.0"
  description: API for handling user authentication operations.
servers:
  - url: http://localhost:4000/
paths:
  #Access Token
  /api/access:
    post:
      summary: Создание нового access token'а
      description: Создание нового access token'а с помощью валидного refresh token'a
      tags:
        - Access Token
      security:
        - bearerAuth: []
      responses:
        201:
          description: Access token был успешно создан
        400:
          description: Не удалось создать access token'a
        500:
          description: Произошла ошибка при создание access token'a

  #Authentication
  /api/auth/register:
    post:
      summary: Регистрация нового пользователя
      description: Регистрация нового пользователя с именем пользователя, электронной почтой и паролем.
      tags:
        - Аутентификация
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - passwordConfirmation
              properties:
                username:
                  type: string
                  example: Swagger
                email:
                  type: string
                  example: example@gmail.com
                password:
                  type: string
                  example: newP@ssw0rd
                passwordConfirmation:
                  type: string
                  example: newP@ssw0rd
      responses:
        201:
          description: Пользователь успешно зарегистрирован.
        400:
          description: Регистрация не удалась.
        500:
          description: Произошла ошибка при регистрации пользователя.
  /api/auth/login:
    post:
      summary: Вход пользователя
      description: Вход пользователя с использованием электронной почты и пароля.
      tags:
        - Аутентификация
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: example@gmail.com
                password:
                  type: string
                  example: newP@ssw0rd
      responses:
        200:
          description: Пользователь успешно вошел в систему.
        400:
          description: Вход в систему не удался.
        500:
          description: Произошла ошибка при входе в систему.
  /api/auth/initiate-password-change:
    post:
      summary: Код для изменение пароля пользователя
      description: Код для изменение пароля пользователя, используя ID пользователя
      tags:
        - Аутентификация
      security:
        - bearerAuth: []
      responses:
        200:
          description: Код успешно отправлен.
        400:
          description: Код для сброса пароля не удалось отправить.
        500:
          description: Произошла ошибка при отправке кода для сброса пароля.
  /api/auth/change-password:
    post:
      summary: Изменение пароля пользователя
      description: Изменение пароля пользователя, используя старый и новый пароли.
      tags:
        - Аутентификация
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
                - code
              properties:
                oldPassword:
                  type: string
                  example: newP@ssw0rd1
                newPassword:
                  type: string
                  example: newP@ssw0rd2
                code:
                  type: string
                  example: 3KYPA
      responses:
        200:
          description: Пароль успешно изменен.
        400:
          description: Изменение пароля не удалось.
        500:
          description: Произошла ошибка при изменение пароля.
  /api/auth/verify:
    post:
      summary: Подтверждение пользователя
      description: Подтверждение пользователя с использованием ID и кода.
      tags:
        - Аутентификация
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - code
              properties:
                id:
                  type: number
                  example: 1
                code:
                  type: string
                  example: AA7RQ
      responses:
        200:
          description: Пользователь успешно подтвержден.
        400:
          description: Подтверждение не удалось.
        500:
          description: Произошла ошибка при верификации пользователя.
  /api/auth/send-email:
    post:
      summary: Отправка повторного подтверждения кода на почту
      description: Отправка нового кода подтверждения на электронную почту пользователя.
      tags:
        - Аутентификация
      security:
        - bearerAuth: []
      responses:
        200:
          description: Письмо с подтверждением отправлено повторно.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Письмо с подтверждением отправлено повторно.
        400:
          description: Пользователь уже подтвержден или неверный запрос.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Пользователь уже подтвержден.
        404:
          description: Пользователь не найден.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Пользователь не найден.
        500:
          description: Произошла ошибка при верификации пользователя.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Произошла ошибка при верификации пользователя.
  #Website
  /api/website/add:
    post:
      summary: Добавление вебсайта
      description: Добавление вебсайта через ID пользователя, электронную почту, название вебсайта, URL вебсайта
      tags:
        - Вебсайт
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - url
              properties:
                name:
                  type: string
                  example: Spark Studio
                url:
                  type: string
                  example: https://sparkstudio.kz/
      responses:
        200:
          description: Вебсайт успешно добавлен
        400:
          description: Не удалось добавить страницу
        500:
          description: Произошла ошибка при добавлении вебсайsта
  /api/website/add-user:
    post:
      summary: Добавление пользователя в вебсайт
      description: Добавление пользователя в вебсайт через электронную почту, ID вебсайта, ID пользователя и роли для пользователя
      tags:
        - Вебсайт
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userEmail
                - userRole
                - websiteID
              properties:
                userEmail:
                  type: string
                  example: example@gmail.com
                userRole:
                  userRole: string
                  example: editor
                websiteID:
                  type: string
                  example: 0bae8a7c-af38-49f4-a6a7-351853cb7448
      responses:
        200:
          description: Вебсайт успешно добавлен
        400:
          description: Не удалось добавить страницу
        500:
          description: Произошла ошибка при добавлении вебсайта
  /upload-website:
    post:
      summary: Загрузка клиентского билда
      description: Загрузите файл билда вебсайта на сервер.
      tags:
        - Вебсайт
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                build:
                  type: string
                  format: binary
                  description: Файл билда вебсайта для загрузки
      responses:
        200:
          description: Файл успешно загружен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Файл успешно загружен
        400:
          description: Ошибка в данных запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        details:
                          type: string
                          example: Файл не предоставлен
                        code:
                          type: string
                          example: UPLOAD_ERROR
        500:
          description: Произошла ошибка при загрузке вебсайта
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Произошла ошибка при загрузке вебсайта.
  /api/website/:
    get:
      summary: Получение всех вебсайтов у пользователя
      description: Получение всех вебсайтов у пользователя через ID пользователя
      tags:
        - Вебсайт
      security:
        - bearerAuth: []
      responses:
        200:
          description: Вебсайты успешно получены
        400:
          description: Не удалось получить вебсайты
        500:
          description: Произошла ошибка при получение вебсайтов
  /verify-website:
    post:
      summary: Проверка веб-сайта
      description: Проверяет веб-сайт по предоставленной ссылке и коду верификации.
      tags:
        - Верификация
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  description: Ссылка на веб-сайт для проверки
                code:
                  type: string
                  description: Код верификации, полученный ранее
      responses:
        201:
          description: Сайт был успешно проверен
        400:
          description: Некорректный запрос (неправильная ссылка или отсутствует код)
        404:
          description: Веб-сайт с указанной ссылкой не найден
        422:
          description: Введенный код не соответствует ожидаемому
        500:
          description: Внутренняя ошибка сервера
  /get-code:
    post:
      summary: Получение кода верификации для веб-сайта
      description: Возвращает метатег с кодом верификации для вставки на веб-сайт.
      tags:
        - Верификация
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  description: Ссылка на веб-сайт для получения кода
      responses:
        200:
          description: Код успешно сгенерирован и возвращен в виде метатега
        400:
          description: Некорректный запрос или ошибка в данных
        500:
          description: Внутренняя ошибка сервера
  /api/website/get-users/{websiteId}:
    get:
      summary: Получение всех пользователей у вебсайта
      description: Получение всех пользователей у вебсайта через ID вебсайта
      tags:
        - Вебсайт
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: websiteId
          required: true
          schema:
            type: string
          description: Уникальный идентификатор вебсайта
      responses:
        200:
          description: Пользователи вебсайта успешно получены
        400:
          description: Не удалось получить пользователей вебсайта
        500:
          description: Произошла ошибка при получение пользователей вебсайта
  /api/website/users:
    get:
      summary: Получение всех вебсайтов с их пользователями
      description: Получение всех вебсайтов с их пользователями через access токен
      tags:
        - Вебсайт
      security:
        - bearerAuth: []
      responses:
        200:
          description: Пользователи со всех вебсайтов успешно получены
        400:
          description: Не удалось получить пользователей со всех вебсайтов
        500:
          description: Произошла ошибка при получение пользователей со всех вебсайтов
  /api/website/get-elements/{url}:
    get:
      summary: Получение элементов вебсайта
      description: Получает HTML элементы с указанного URL, используя переданный в теле запроса URL.
      tags:
        - Вебсайт
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: url
          required: true
          schema:
            type: string
            example: https://samigroup.kz/
          description: URL вебсайта
      responses:
        200:
          description: Элементы успешно извлечены
        400:
          description: Ошибка в данных запроса
        500:
          description: Произошла ошибка при попытке получения элементов
  /api/website/delete:
    delete:
      summary: Удаление вебсайта
      description: Удаляет вебсайт, используя URL, предоставленный в теле запроса, через access токен.
      tags:
        - Вебсайт
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - url
              properties:
                url:
                  type: string
                  description: URL вебсайта, который нужно удалить
                  example: https://sparkstudio.kz/
      responses:
        200:
          description: Вебсайт успешно удален
        400:
          description: Ошибка в данных запроса
        500:
          description: Серверная ошибка при попытке удаления вебсайта
  #Color
  /api/color/add:
    post:
      summary: Добавление нового цвета
      description: Добавляет новый цвет, используя hex или rgba
      tags:
        - Цвета
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - value
              properties:
                value:
                  type: string
                  description: Значение цвета, которое нужно добавить
                  example: "#FF5733"
      responses:
        "200":
          description: Цвет успешно добавлен
        "400":
          description: Ошибка в данных запроса
        "500":
          description: Серверная ошибка при попытке добавления цвета
  /api/color/add-user-color:
    post:
      summary: Добавление цвета пользователя
      description: Добавляет цвет, связанный с пользователем в формате HEX или RGBA.
      tags:
        - Цвета
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - value
              properties:
                value:
                  type: string
                  description: Значение цвета в формате HEX или RGBA.
                  pattern: '^#([0-9A-Fa-f]{6}|[0-9A-Fa-f]{3})$|^rgba?\(\d{1,3},\s*\d{1,3},\s*\d{1,3}(,\s*(0(\.\d*)?|1(\.0*)?))?\)$'
                  example: "rgba(255, 87, 51, 0.8)"
      responses:
        "200":
          description: Цвет пользователя успешно добавлен
        "400":
          description: Ошибка в данных запроса
        "500":
          description: Серверная ошибка при попытке добавления цвета пользователя
  /api/color/website:
    post:
      summary: Добавление цвета для вебсайта
      description: Добавляет цвет для вебсайта в формате HEX или RGBA, используя идентификатор вебсайта, идентификатор пользователя и значение цвета.
      tags:
        - Цвета
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - websiteId
                - value
              properties:
                websiteId:
                  type: string
                  format: uuid
                  description: Идентификатор вебсайта для добавления цвета.
                  example: "e29d9e04-5b6c-4f2f-8e2b-6e3d1e0535d4"
                value:
                  type: string
                  description: Значение цвета в формате HEX или RGBA.
                  example: "#FF5733"
      responses:
        "200":
          description: Цвет для вебсайта успешно добавлен
        "400":
          description: Ошибка в данных запроса
        "500":
          description: Серверная ошибка при попытке добавления цвета для вебсайта
  /api/color/get-user-colors:
    get:
      summary: Получение цвета пользователя
      description: Получает любимые цвета пользователя, сохраненный в системе.
      tags:
        - Цвета
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Успешный ответ с цветом пользователя
        "400":
          description: Ошибка в данных запроса
        "500":
          description: "Серверная ошибка при попытке получения цвета пользователя"
  /api/color/website/{websiteId}:
    get:
      summary: Получение цвета для вебсайта
      description: Получает цвет вебсайта по его идентификатору.
      tags:
        - Цвета
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: websiteId
          required: true
          schema:
            type: string
            format: uuid
          description: Идентификатор вебсайта для получения цвета.
          example: "e29d9e04-5b6c-4f2f-8e2b-6e3d1e0535d4"
      responses:
        "200":
          description: Успешный ответ с цветом вебсайта
        "400":
          description: Ошибка в данных запроса
        "404":
          description: Вебсайт не найден
        "500":
          description: Серверная ошибка при попытке получения цвета вебсайта
  /api/color/user/{value}:
    delete:
      summary: Удаление цвета пользователя
      description: Удаляет цвет пользователя, используя предоставленное значение цвета и access токен.
      tags:
        - Цвета
      security:
        - bearerAuth: []
      parameters:
        - name: value
          in: path
          required: true
          schema:
            type: string
            description: Значение цвета, который нужно удалить в формате HEX или RGBA
            example: "#FF5733"
      responses:
        "200":
          description: Цвет пользователя успешно удален
        "400":
          description: Ошибка в данных запроса
        "404":
          description: Цвет пользователя не найден
        "500":
          description: Серверная ошибка при попытке удаления цвета пользователя
  /api/color/website/{websiteId}/{value}:
    delete:
      summary: Удаление цвета вебсайта
      description: Удаляет цвет вебсайта по его идентификатору и значению цвета.
      tags:
        - Цвета
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: websiteId
          required: true
          schema:
            type: string
            format: uuid
          description: Идентификатор вебсайта для удаления цвета.
          example: "e29d9e04-5b6c-4f2f-8e2b-6e3d1e0535d4"
        - in: path
          name: value
          required: true
          schema:
            type: string
          description: Значение цвета для удаления в формате HEX или RGBA
          example: "#FF5733"
      responses:
        "200":
          description: Цвет вебсайта успешно удален
        "400":
          description: Ошибка в данных запроса
        "404":
          description: Вебсайт или цвет не найден
        "500":
          description: Серверная ошибка при попытке удаления цвета вебсайта
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
